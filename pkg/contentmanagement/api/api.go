package api

import (
	"net/http"

	// docs is generated by Swag CLI, you have to import it.
	"github.com/crikke/cms/pkg/contentmanagement/api/handlers"
	contentapi "github.com/crikke/cms/pkg/contentmanagement/api/v1/content"
	contentdefapi "github.com/crikke/cms/pkg/contentmanagement/api/v1/contentdefinition"
	"github.com/crikke/cms/pkg/workspace"

	"github.com/crikke/cms/pkg/content"
	"github.com/crikke/cms/pkg/contentdefinition"
	"github.com/crikke/cms/pkg/contentmanagement/app"
	"github.com/crikke/cms/pkg/contentmanagement/app/command"
	"github.com/crikke/cms/pkg/contentmanagement/app/query"
	"github.com/go-chi/chi/v5"
	"go.mongodb.org/mongo-driver/mongo"
)

func NewContentManagementAPI(c *mongo.Client) http.Handler {

	// docs.SwaggerInfo.Title = "Content management API"
	// docs.SwaggerInfo.Version = "0.1.0"
	// docs.SwaggerInfo.Description = "This api is responsible for managing content."
	// docs.SwaggerInfo.Host = "localhost:8080"
	// docs.SwaggerInfo.BasePath = "/contentmanagement/"

	app := initializeHandlers(c)
	wsHandler := handlers.WorkspaceHandler{App: app}

	r := chi.NewRouter()
	r.Route("/workspaces/{workspace}", func(r chi.Router) {
		r.Use(wsHandler.WorkspaceParamContext)

		r.Mount("/content", contentapi.NewContentRoute(app))
		r.Mount("/contentdefinitions", contentdefapi.NewContentDefinitionRoute(app))
	})

	return r
}

func initializeHandlers(c *mongo.Client) app.App {

	contentRepo := content.NewContentRepository(c)
	contentDefinitionRepo := contentdefinition.NewContentDefinitionRepository(c)
	workspaceRepo := workspace.NewWorkspaceRepository(c)

	app := app.App{
		Queries: app.Queries{
			GetContent: query.GetContentHandler{
				Repo:          contentRepo,
				WorkspaceRepo: workspaceRepo,
			},
			ListContent: query.ListContentHandler{
				Repo:                contentRepo,
				WorkspaceRepository: workspaceRepo,
			},
			GetContentDefinition: query.GetContentDefinitionHandler{
				Repo: contentDefinitionRepo,
			},
			GetPropertyDefinition: query.GetPropertyDefinitionHandler{
				Repo: contentDefinitionRepo,
			},
			ListContentDefinitions: query.ListContentDefinitionHandler{
				Repo: contentDefinitionRepo,
			},
			WorkspaceQueries: app.WorkspaceQueries{
				GetWorkspace: query.GetWorkspaceHandler{
					Repo: workspaceRepo,
				},
			},
		},
		Commands: app.Commands{
			CreateContent: command.CreateContentHandler{
				ContentDefinitionRepository: contentDefinitionRepo,
				ContentRepository:           contentRepo,
				Factory:                     content.Factory{},
				WorkspaceRepository:         workspaceRepo,
			},
			UpdateContentFields: command.UpdateContentFieldsHandler{
				ContentRepository:           contentRepo,
				ContentDefinitionRepository: contentDefinitionRepo,
				Factory:                     content.Factory{},
			},
			ArchiveContent: command.ArchiveContentHandler{
				ContentRepository: contentRepo,
			},
			PublishContent: command.PublishContentHandler{
				ContentDefinitionRepository: contentDefinitionRepo,
				ContentRepository:           contentRepo,
				WorkspaceRepository:         workspaceRepo,
			},
			CreateContentDefinition: command.CreateContentDefinitionHandler{
				Repo:          contentDefinitionRepo,
				WorkspaceRepo: workspaceRepo,
			},
			UpdateContentDefinition: command.UpdateContentDefinitionHandler{
				Repo:          contentDefinitionRepo,
				WorkspaceRepo: workspaceRepo,
			},
			DeleteContentDefinition: command.DeleteContentDefinitionHandler{},
			CreatePropertyDefinition: command.CreatePropertyDefinitionHandler{
				Repo:    contentDefinitionRepo,
				Factory: contentdefinition.PropertyDefinitionFactory{},
			},
			UpdatePropertyDefinition: command.UpdatePropertyDefinitionHandler{
				Repo: contentDefinitionRepo,
			},
			DeletePropertyDefinition: command.DeletePropertyDefinitionHandler{},

			WorkspaceCommands: app.WorkspaceCommands{},
		},
	}

	return app
}
